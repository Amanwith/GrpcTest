import autogenerated.*;
import com.weng.rpc.entity.Book;
import io.grpc.stub.StreamObserver;

import java.util.List;

public class LibraryServiceImpl extends LibraryServiceGrpc.LibraryServiceImplBase{
    @Override
    public void add(BookRequest request, StreamObserver<addResponse> responseObserver) {
        addResponse response=null;

        //获取两个请求参数
        String id = request.getId();
        String name = request.getName();
        Book book = new Book();
        book.setId(id);
        book.setName(name);
        int insert = TestJdbc.insert(book);
        boolean flag=false;
        if(insert==1) flag = true;
        //响应
       try{
           response=addResponse.newBuilder().setSuccess(flag).build();
       }catch (Exception e){
           responseObserver.onError(e);
       }finally {
           responseObserver.onNext(response);
       }
       responseObserver.onCompleted();
    }
    @Override
    public void queryById(SelectBookByIDRequest request, StreamObserver<ExactBookResponse> responseObserver){
        ExactBookResponse response = null;
        String id = request.getId();
        Book book = TestJdbc.selectById(id);
        BookRequest bookRequest = BookRequest.newBuilder().setId(book.getId()).setName(book.getName()).build();
        try{
            response=ExactBookResponse.newBuilder().setBook(bookRequest).build();
        }catch (Exception e){
            responseObserver.onError(e);
        }finally {
            responseObserver.onNext(response);
        }
        responseObserver.onCompleted();
    }
    @Override
    public void queryByName(SelectBookByNameRequest request, StreamObserver<VagueBookResponse> responseObserver){
        VagueBookResponse.Builder response = VagueBookResponse.newBuilder();
        String name = request.getName();
        List<Book> books = TestJdbc.selectByName(name);
        for(Book book:books){
            BookRequest bookRequest = BookRequest.newBuilder().setId(book.getId()).setName(book.getName()).build();
            response.addBookList(bookRequest);
        }
        try{
            response.build();
        }catch (Exception e){
            responseObserver.onError(e);
        }finally {
            responseObserver.onNext(response.build());
        }
        responseObserver.onCompleted();
    }
    @Override
    public void delete(DeleteRequest request, StreamObserver<deleteResponse> responseObserver){
        deleteResponse response = null;
        String id = request.getId();
        int delete = TestJdbc.delete(id);
        boolean flag = false;
        if(delete==1)  flag = true;
        try{
            response=deleteResponse.newBuilder().setSuccess(flag).build();
        }catch (Exception e){
            responseObserver.onError(e);
        }finally {
            responseObserver.onNext(response);
        }
        responseObserver.onCompleted();
    }
}
