package autogenerated;

import static io.grpc.MethodDescriptor.generateFullMethodName;
import static io.grpc.stub.ClientCalls.asyncUnaryCall;
import static io.grpc.stub.ClientCalls.blockingUnaryCall;
import static io.grpc.stub.ClientCalls.futureUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnaryCall;
import static io.grpc.stub.ServerCalls.asyncUnimplementedUnaryCall;

/**
 * <pre>
 *服务接口定义，服务端和客户端都要遵循该接口进行通信
 * </pre>
 */
@javax.annotation.Generated(
    value = "by gRPC proto compiler (version 1.17.1)",
    comments = "Source: calservice.proto")
public final class LibraryServiceGrpc {

  private LibraryServiceGrpc() {}

  public static final String SERVICE_NAME = "LibraryService";

  // Static method descriptors that strictly reflect the proto.
  private static volatile io.grpc.MethodDescriptor<BookRequest,
      addResponse> getAddMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "add",
      requestType = BookRequest.class,
      responseType = addResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<BookRequest,
      addResponse> getAddMethod() {
    io.grpc.MethodDescriptor<BookRequest, addResponse> getAddMethod;
    if ((getAddMethod = LibraryServiceGrpc.getAddMethod) == null) {
      synchronized (LibraryServiceGrpc.class) {
        if ((getAddMethod = LibraryServiceGrpc.getAddMethod) == null) {
          LibraryServiceGrpc.getAddMethod = getAddMethod = 
              io.grpc.MethodDescriptor.<BookRequest, addResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "LibraryService", "add"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  BookRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  addResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new LibraryServiceMethodDescriptorSupplier("add"))
                  .build();
          }
        }
     }
     return getAddMethod;
  }

  private static volatile io.grpc.MethodDescriptor<SelectBookByIDRequest,
      ExactBookResponse> getQueryByIdMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "queryById",
      requestType = SelectBookByIDRequest.class,
      responseType = ExactBookResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<SelectBookByIDRequest,
      ExactBookResponse> getQueryByIdMethod() {
    io.grpc.MethodDescriptor<SelectBookByIDRequest, ExactBookResponse> getQueryByIdMethod;
    if ((getQueryByIdMethod = LibraryServiceGrpc.getQueryByIdMethod) == null) {
      synchronized (LibraryServiceGrpc.class) {
        if ((getQueryByIdMethod = LibraryServiceGrpc.getQueryByIdMethod) == null) {
          LibraryServiceGrpc.getQueryByIdMethod = getQueryByIdMethod = 
              io.grpc.MethodDescriptor.<SelectBookByIDRequest, ExactBookResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "LibraryService", "queryById"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  SelectBookByIDRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  ExactBookResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new LibraryServiceMethodDescriptorSupplier("queryById"))
                  .build();
          }
        }
     }
     return getQueryByIdMethod;
  }

  private static volatile io.grpc.MethodDescriptor<SelectBookByNameRequest,
      VagueBookResponse> getQueryByNameMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "queryByName",
      requestType = SelectBookByNameRequest.class,
      responseType = VagueBookResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<SelectBookByNameRequest,
      VagueBookResponse> getQueryByNameMethod() {
    io.grpc.MethodDescriptor<SelectBookByNameRequest, VagueBookResponse> getQueryByNameMethod;
    if ((getQueryByNameMethod = LibraryServiceGrpc.getQueryByNameMethod) == null) {
      synchronized (LibraryServiceGrpc.class) {
        if ((getQueryByNameMethod = LibraryServiceGrpc.getQueryByNameMethod) == null) {
          LibraryServiceGrpc.getQueryByNameMethod = getQueryByNameMethod = 
              io.grpc.MethodDescriptor.<SelectBookByNameRequest, VagueBookResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "LibraryService", "queryByName"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  SelectBookByNameRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  VagueBookResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new LibraryServiceMethodDescriptorSupplier("queryByName"))
                  .build();
          }
        }
     }
     return getQueryByNameMethod;
  }

  private static volatile io.grpc.MethodDescriptor<DeleteRequest,
      deleteResponse> getDeleteMethod;

  @io.grpc.stub.annotations.RpcMethod(
      fullMethodName = SERVICE_NAME + '/' + "delete",
      requestType = DeleteRequest.class,
      responseType = deleteResponse.class,
      methodType = io.grpc.MethodDescriptor.MethodType.UNARY)
  public static io.grpc.MethodDescriptor<DeleteRequest,
      deleteResponse> getDeleteMethod() {
    io.grpc.MethodDescriptor<DeleteRequest, deleteResponse> getDeleteMethod;
    if ((getDeleteMethod = LibraryServiceGrpc.getDeleteMethod) == null) {
      synchronized (LibraryServiceGrpc.class) {
        if ((getDeleteMethod = LibraryServiceGrpc.getDeleteMethod) == null) {
          LibraryServiceGrpc.getDeleteMethod = getDeleteMethod = 
              io.grpc.MethodDescriptor.<DeleteRequest, deleteResponse>newBuilder()
              .setType(io.grpc.MethodDescriptor.MethodType.UNARY)
              .setFullMethodName(generateFullMethodName(
                  "LibraryService", "delete"))
              .setSampledToLocalTracing(true)
              .setRequestMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  DeleteRequest.getDefaultInstance()))
              .setResponseMarshaller(io.grpc.protobuf.ProtoUtils.marshaller(
                  deleteResponse.getDefaultInstance()))
                  .setSchemaDescriptor(new LibraryServiceMethodDescriptorSupplier("delete"))
                  .build();
          }
        }
     }
     return getDeleteMethod;
  }

  /**
   * Creates a new async stub that supports all call types for the service
   */
  public static LibraryServiceStub newStub(io.grpc.Channel channel) {
    return new LibraryServiceStub(channel);
  }

  /**
   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
   */
  public static LibraryServiceBlockingStub newBlockingStub(
      io.grpc.Channel channel) {
    return new LibraryServiceBlockingStub(channel);
  }

  /**
   * Creates a new ListenableFuture-style stub that supports unary calls on the service
   */
  public static LibraryServiceFutureStub newFutureStub(
      io.grpc.Channel channel) {
    return new LibraryServiceFutureStub(channel);
  }

  /**
   * <pre>
   *服务接口定义，服务端和客户端都要遵循该接口进行通信
   * </pre>
   */
  public static abstract class LibraryServiceImplBase implements io.grpc.BindableService {

    /**
     * <pre>
     *接收请求，返回响应
     * </pre>
     */
    public void add(BookRequest request,
                    io.grpc.stub.StreamObserver<addResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getAddMethod(), responseObserver);
    }

    /**
     */
    public void queryById(SelectBookByIDRequest request,
                          io.grpc.stub.StreamObserver<ExactBookResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getQueryByIdMethod(), responseObserver);
    }

    /**
     */
    public void queryByName(SelectBookByNameRequest request,
                            io.grpc.stub.StreamObserver<VagueBookResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getQueryByNameMethod(), responseObserver);
    }

    /**
     */
    public void delete(DeleteRequest request,
                       io.grpc.stub.StreamObserver<deleteResponse> responseObserver) {
      asyncUnimplementedUnaryCall(getDeleteMethod(), responseObserver);
    }

    @Override public final io.grpc.ServerServiceDefinition bindService() {
      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
          .addMethod(
            getAddMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                BookRequest,
                addResponse>(
                  this, METHODID_ADD)))
          .addMethod(
            getQueryByIdMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                SelectBookByIDRequest,
                ExactBookResponse>(
                  this, METHODID_QUERY_BY_ID)))
          .addMethod(
            getQueryByNameMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                SelectBookByNameRequest,
                VagueBookResponse>(
                  this, METHODID_QUERY_BY_NAME)))
          .addMethod(
            getDeleteMethod(),
            asyncUnaryCall(
              new MethodHandlers<
                DeleteRequest,
                deleteResponse>(
                  this, METHODID_DELETE)))
          .build();
    }

  }

  /**
   * <pre>
   *服务接口定义，服务端和客户端都要遵循该接口进行通信
   * </pre>
   */
  public static final class LibraryServiceStub extends io.grpc.stub.AbstractStub<LibraryServiceStub> {
    private LibraryServiceStub(io.grpc.Channel channel) {
      super(channel);
    }

    private LibraryServiceStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @Override
    protected LibraryServiceStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new LibraryServiceStub(channel, callOptions);
    }

    /**
     * <pre>
     *接收请求，返回响应
     * </pre>
     */
    public void add(BookRequest request,
                    io.grpc.stub.StreamObserver<addResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getAddMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     */
    public void queryById(SelectBookByIDRequest request,
                          io.grpc.stub.StreamObserver<ExactBookResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getQueryByIdMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     */
    public void queryByName(SelectBookByNameRequest request,
                            io.grpc.stub.StreamObserver<VagueBookResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getQueryByNameMethod(), getCallOptions()), request, responseObserver);
    }

    /**
     */
    public void delete(DeleteRequest request,
                       io.grpc.stub.StreamObserver<deleteResponse> responseObserver) {
      asyncUnaryCall(
          getChannel().newCall(getDeleteMethod(), getCallOptions()), request, responseObserver);
    }
  }

  /**
   * <pre>
   *服务接口定义，服务端和客户端都要遵循该接口进行通信
   * </pre>
   */
  public static final class LibraryServiceBlockingStub extends io.grpc.stub.AbstractStub<LibraryServiceBlockingStub> {
    private LibraryServiceBlockingStub(io.grpc.Channel channel) {
      super(channel);
    }

    private LibraryServiceBlockingStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @Override
    protected LibraryServiceBlockingStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new LibraryServiceBlockingStub(channel, callOptions);
    }

    /**
     * <pre>
     *接收请求，返回响应
     * </pre>
     */
    public addResponse add(BookRequest request) {
      return blockingUnaryCall(
          getChannel(), getAddMethod(), getCallOptions(), request);
    }

    /**
     */
    public ExactBookResponse queryById(SelectBookByIDRequest request) {
      return blockingUnaryCall(
          getChannel(), getQueryByIdMethod(), getCallOptions(), request);
    }

    /**
     */
    public VagueBookResponse queryByName(SelectBookByNameRequest request) {
      return blockingUnaryCall(
          getChannel(), getQueryByNameMethod(), getCallOptions(), request);
    }

    /**
     */
    public deleteResponse delete(DeleteRequest request) {
      return blockingUnaryCall(
          getChannel(), getDeleteMethod(), getCallOptions(), request);
    }
  }

  /**
   * <pre>
   *服务接口定义，服务端和客户端都要遵循该接口进行通信
   * </pre>
   */
  public static final class LibraryServiceFutureStub extends io.grpc.stub.AbstractStub<LibraryServiceFutureStub> {
    private LibraryServiceFutureStub(io.grpc.Channel channel) {
      super(channel);
    }

    private LibraryServiceFutureStub(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      super(channel, callOptions);
    }

    @Override
    protected LibraryServiceFutureStub build(io.grpc.Channel channel,
        io.grpc.CallOptions callOptions) {
      return new LibraryServiceFutureStub(channel, callOptions);
    }

    /**
     * <pre>
     *接收请求，返回响应
     * </pre>
     */
    public com.google.common.util.concurrent.ListenableFuture<addResponse> add(
        BookRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getAddMethod(), getCallOptions()), request);
    }

    /**
     */
    public com.google.common.util.concurrent.ListenableFuture<ExactBookResponse> queryById(
        SelectBookByIDRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getQueryByIdMethod(), getCallOptions()), request);
    }

    /**
     */
    public com.google.common.util.concurrent.ListenableFuture<VagueBookResponse> queryByName(
        SelectBookByNameRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getQueryByNameMethod(), getCallOptions()), request);
    }

    /**
     */
    public com.google.common.util.concurrent.ListenableFuture<deleteResponse> delete(
        DeleteRequest request) {
      return futureUnaryCall(
          getChannel().newCall(getDeleteMethod(), getCallOptions()), request);
    }
  }

  private static final int METHODID_ADD = 0;
  private static final int METHODID_QUERY_BY_ID = 1;
  private static final int METHODID_QUERY_BY_NAME = 2;
  private static final int METHODID_DELETE = 3;

  private static final class MethodHandlers<Req, Resp> implements
      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
    private final LibraryServiceImplBase serviceImpl;
    private final int methodId;

    MethodHandlers(LibraryServiceImplBase serviceImpl, int methodId) {
      this.serviceImpl = serviceImpl;
      this.methodId = methodId;
    }

    @Override
    @SuppressWarnings("unchecked")
    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        case METHODID_ADD:
          serviceImpl.add((BookRequest) request,
              (io.grpc.stub.StreamObserver<addResponse>) responseObserver);
          break;
        case METHODID_QUERY_BY_ID:
          serviceImpl.queryById((SelectBookByIDRequest) request,
              (io.grpc.stub.StreamObserver<ExactBookResponse>) responseObserver);
          break;
        case METHODID_QUERY_BY_NAME:
          serviceImpl.queryByName((SelectBookByNameRequest) request,
              (io.grpc.stub.StreamObserver<VagueBookResponse>) responseObserver);
          break;
        case METHODID_DELETE:
          serviceImpl.delete((DeleteRequest) request,
              (io.grpc.stub.StreamObserver<deleteResponse>) responseObserver);
          break;
        default:
          throw new AssertionError();
      }
    }

    @Override
    @SuppressWarnings("unchecked")
    public io.grpc.stub.StreamObserver<Req> invoke(
        io.grpc.stub.StreamObserver<Resp> responseObserver) {
      switch (methodId) {
        default:
          throw new AssertionError();
      }
    }
  }

  private static abstract class LibraryServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoFileDescriptorSupplier, io.grpc.protobuf.ProtoServiceDescriptorSupplier {
    LibraryServiceBaseDescriptorSupplier() {}

    @Override
    public com.google.protobuf.Descriptors.FileDescriptor getFileDescriptor() {
      return Calservice.getDescriptor();
    }

    @Override
    public com.google.protobuf.Descriptors.ServiceDescriptor getServiceDescriptor() {
      return getFileDescriptor().findServiceByName("LibraryService");
    }
  }

  private static final class LibraryServiceFileDescriptorSupplier
      extends LibraryServiceBaseDescriptorSupplier {
    LibraryServiceFileDescriptorSupplier() {}
  }

  private static final class LibraryServiceMethodDescriptorSupplier
      extends LibraryServiceBaseDescriptorSupplier
      implements io.grpc.protobuf.ProtoMethodDescriptorSupplier {
    private final String methodName;

    LibraryServiceMethodDescriptorSupplier(String methodName) {
      this.methodName = methodName;
    }

    @Override
    public com.google.protobuf.Descriptors.MethodDescriptor getMethodDescriptor() {
      return getServiceDescriptor().findMethodByName(methodName);
    }
  }

  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;

  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
    io.grpc.ServiceDescriptor result = serviceDescriptor;
    if (result == null) {
      synchronized (LibraryServiceGrpc.class) {
        result = serviceDescriptor;
        if (result == null) {
          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
              .setSchemaDescriptor(new LibraryServiceFileDescriptorSupplier())
              .addMethod(getAddMethod())
              .addMethod(getQueryByIdMethod())
              .addMethod(getQueryByNameMethod())
              .addMethod(getDeleteMethod())
              .build();
        }
      }
    }
    return result;
  }
}
